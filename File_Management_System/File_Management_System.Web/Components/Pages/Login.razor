@page "/login"  
@inject IdentityApiClient IdentityApi  
@inject IProtectedStorageService ProtectedStorage  
@inject NavigationManager Nav  
@inject AuthenticationStateProvider AuthStateProvider  
@using File_Management_System.Web.Services  
@rendermode InteractiveServer  

<RadzenCard class="rz-my-12 rz-mx-auto rz-p-4 rz-p-md-12" style="max-width: 600px;">  
    <EditForm Model="loginModel" OnValidSubmit="@HandleLogin" FormName="LoginForm">  
        <DataAnnotationsValidator />  
        <ValidationSummary />  

        <div class="rz-fieldset">  
            <div class="rz-fieldset-legend">Login</div>  
            <div class="rz-fieldset-content">  
                <InputText class="rz-inputtext" style="width:100%;" @bind-Value="loginModel.UserName"  
                    placeholder="Email" />  
                <InputText class="rz-inputtext" style="width:100%;margin-top:12px;" @bind-Value="loginModel.Password"  
                    placeholder="Password" type="password" />  
                <button type="submit" class="rz-button"  
                    style="margin-top:18px;width:100%;background:#1976d2;color:white;border-radius:6px;">  
                    Login  
                </button>  
            </div>  
        </div>  
    </EditForm>  
    @if (!string.IsNullOrEmpty(message))  
    {  
        <RadzenAlert Severity="@(success ? "Success" : "Error")" Style="margin-top:18px;border-radius:6px;">  
            @message  
        </RadzenAlert>  
    }  
    @* <RadzenButton Text="Logout" Click="@Logout"  
        Style="margin-top:18px;width:100%;background:#e53935;color:white;border-radius:6px;"  
        Visible="@(token != null)" />   *@
    <div style="margin-top:16px;text-align:center;">  
        <a href="/register" style="color:#1976d2;text-decoration:none;">Don't have an account? Register</a>  
    </div>  
</RadzenCard>  

@code {  
    private LoginModel loginModel = new();  
    private string? message;  
    private string? token;  
    private bool success;  
    private bool _initialized;  

    protected override async Task OnAfterRenderAsync(bool firstRender)  
    {  
        if (firstRender && !_initialized)  
        {  
            token = await ProtectedStorage.GetAsync<string>("jwt");  
            _initialized = true;  
            StateHasChanged();  
        }  
    }  

    private async Task HandleLogin()  
    {  
        try  
        {  
            var (isSuccess, accessToken, error) = await IdentityApi.LoginAsync(loginModel.UserName, loginModel.Password);  
            if (isSuccess && !string.IsNullOrEmpty(accessToken))  
            {  
                token = accessToken;  
                await ProtectedStorage.SetAsync("jwt", token);  
                // Notify the authentication state provider  
                if (AuthStateProvider is CustomAuthenticationStateProvider customProvider)
                {  
                    customProvider.NotifyUserAuthentication(token);  
                }  
                message = "Login successful!";  
                success = true;  
                Nav.NavigateTo("/");  
            }  
            else  
            {  
                message = "Login failed. " + (error ?? "Check your credentials.");  
                success = false;  
            }  
        }  
        catch (Exception ex)  
        {  
            message = ex.ToString();  
            success = false;  
        }  
    }  

    // private async Task Logout()  
    // {  
    //     await ProtectedStorage.RemoveAsync("jwt");  
    //     token = null;  
    //     message = "Logged out.";  
    //     success = true;  
    //     Nav.NavigateTo("/login", forceLoad: true);  
    // }  

    public class LoginModel  
    {  
        public string UserName { get; set; } = string.Empty;  
        public string Password { get; set; } = string.Empty;  
    }  
}

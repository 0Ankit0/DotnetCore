@{
    ViewData["Title"] = "Home Page";
}
@section Styles {
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 20px;
            background-color: #f4f4f4;
            color: #333;
        }

        h1, h2 {
            color: #333;
        }

        h1 {
            text-align: center;
            margin-bottom: 20px;
        }

        .section {
            margin-bottom: 40px;
        }

        .section h2 {
            background-color: #2980b9;
            color: white;
            padding: 10px;
            border-radius: 5px;
        }

        ul {
            padding-left: 20px;
        }

        .example, .explanation {
            background-color: #fff;
            border-radius: 5px;
            padding: 15px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .code {
            background-color: #2d2d2d;
            color: white;
            padding: 15px;
            border-radius: 5px;
            font-family: "Courier New", monospace;
            overflow-x: auto;
        }

        .code pre {
            margin: 0;
        }

        .real-life {
            margin-top: 30px;
            background-color: #f9f9f9;
            padding: 15px;
            border-left: 5px solid #2980b9;
        }

        .real-life h3 {
            margin-top: 0;
        }

        .list-item {
            margin-bottom: 10px;
        }

        .callout {
            background-color: #eaf2f8;
            padding: 10px;
            border-left: 4px solid #2980b9;
            margin-top: 20px;
        }
    </style>
}
<h1>Singleton Design Pattern Explained</h1>

<div class="section">
    <h2>What the Singleton Design Pattern Does</h2>
    <p>
        The <strong>Singleton Design Pattern</strong> ensures that a class has only one instance, providing a global access point to that instance. It restricts the instantiation of the class and enforces a single shared object.
    </p>
</div>

<div class="section">
    <h2>Problem it Solves</h2>
    <ul>
        <li class="list-item"><strong>Controlled Access</strong>: Guarantees that only one instance of a class exists, controlling shared resources or configurations.</li>
        <li class="list-item"><strong>Global Access</strong>: Provides a single access point to the instance across the application.</li>
        <li class="list-item"><strong>Improved Efficiency</strong>: Avoids redundant object creation, saving memory and ensuring consistent state.</li>
    </ul>
</div>

<div class="section">
    <h2>How It Works</h2>
    <p>
        The Singleton Pattern uses a private constructor to prevent external instantiation and a static property or method to return the single instance of the class. Often, thread-safety is implemented to handle concurrent access in multi-threaded applications.
    </p>
</div>

<div class="section">
    <h2>Real-life Example</h2>
    <div class="real-life">
        <h3>Database Connection Manager</h3>
        <p>
            Imagine managing a database connection in an application. You want a single shared connection instance to avoid resource conflicts:
        </p>
        <ul>
            <li class="list-item"><strong>Single Point of Access</strong>: The same connection instance is reused for every query.</li>
            <li class="list-item"><strong>Consistent State</strong>: Ensures the connection configuration is consistent throughout the application.</li>
            <li class="list-item"><strong>Performance Optimization</strong>: Avoids the overhead of creating multiple connections.</li>
        </ul>
    </div>
</div>

<div class="section">
    <h2>Singleton Pattern in Code</h2>
    <p>The Singleton Design Pattern can be implemented in code like this:</p>

    <div class="example">
        <p><strong>Code Example:</strong></p>
        <div class="code">
            <pre>
public sealed class DatabaseConnection
{
    private static readonly Lazy<DatabaseConnection> instance = 
        new Lazy<DatabaseConnection>(() => new DatabaseConnection());

    private DatabaseConnection()
    {
        // Private constructor to prevent instantiation
        Console.WriteLine("Database connection initialized.");
    }

    public static DatabaseConnection Instance
    {
        get
        {
            return instance.Value;
        }
    }

    public void ExecuteQuery(string query)
    {
        Console.WriteLine($"Executing query: {query}");
    }
}

public class Program
{
    public static void Main(string[] args)
    {
        // Accessing the Singleton instance
        DatabaseConnection connection1 = DatabaseConnection.Instance;
        DatabaseConnection connection2 = DatabaseConnection.Instance;

        connection1.ExecuteQuery("SELECT * FROM Users");

        // Demonstrating that both references point to the same instance
        Console.WriteLine(Object.ReferenceEquals(connection1, connection2)); // Output: True
    }
}
            </pre>
        </div>
    </div>
</div>

<div class="section callout">
    <h2>Benefits of the Singleton Pattern</h2>
    <ul>
        <li class="list-item"><strong>Global Access</strong>: Provides a single access point to a shared resource or service.</li>
        <li class="list-item"><strong>Resource Management</strong>: Ensures efficient use of resources by preventing redundant object creation.</li>
        <li class="list-item"><strong>Consistency</strong>: Maintains a consistent state for shared objects across the application.</li>
        <li class="list-item"><strong>Thread Safety</strong>: When implemented correctly, ensures safe access in multi-threaded environments.</li>
    </ul>
</div>

<div class="section">
    <h2>Conclusion</h2>
    <p>
        The Singleton Design Pattern is an essential tool for managing shared resources and ensuring a consistent state in an application. By controlling instantiation and providing a global access point, it simplifies resource management and improves application efficiency.
    </p>
</div>
